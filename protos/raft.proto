// Copyright (c) 2017, Chen Shen
// All rights reserved.

syntax = "proto3";

package ndemons;

// Definitions of Raft RPCs between nodes.
service RaftRpc {
    // Invoked by candidated to gather votes.
    rpc RequestVote(VoteRequest) returns (VoteResponse);

    // Invoked by leader to replicate log entries; also used as heartbeat.
    rpc AppendEntries(AppendRequest) returns (AppendResponse);
}

message VoteRequest {
    // Candidate's term.
    int64 term = 1;

    // Candidate requesting vote.
    int64 candidate_id = 2;

    // Index of candidate's last log entry.
    uint32 last_log_index = 3;

    // Term of Candidate's last log entry.
    int64 last_log_term = 4;
}

message VoteResponse {
    // Current term, for candidate to update itself.
    int64 term = 1;

    // True means candidate received vote.
    bool vote_granted = 2;
}

message AppendRequest {
    // Leader's term.
    int64 term = 1;

    // For followers to redirect client.
    int64 leader_id = 2;

    // Index of log entry immediately preceding new ones.
    uint32 prev_log_index = 3;

    // Term of entry at prev_log_index.
    int64 prev_log_term = 4;

    // Log entries to store, empty is used as heartbeat.
    repeated bytes entries = 5;

    // Leader's commit index.
    uint32 leader_commit_index = 6;
}

message AppendResponse {
    // Current term for leader to update itself.
    int64 term = 1;

    // True if follower contained entry matching prev_log_index and prev_log_term.
    bool success = 2;
}

// Config of a node in raft group.
message NodeConfig {
    int64 id = 1;
    string ip_address = 2;
    uint32 port = 3;
}

// Config of a raft group.
message GroupConfig {
    int64 id = 1;
    repeated NodeConfig nodes = 2;
    int64 heartbeat_timeout_ms = 3;
    int64 election_timeout_ms = 4;
}
